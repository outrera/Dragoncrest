[gd_resource type="CanvasItemMaterial" load_steps=3 format=1]

[ext_resource path="res://assets/img/palette.jpg" type="Texture" id=1]

[sub_resource type="CanvasItemShader" id=1]

_code = { "fragment":"uniform texture palette; // The palette texture.\nuniform float shift; // The shift amount on the palette texture.\ncolor pixcol;\n\n\n// Rounds a value.\nfloat roundval(float value){\n\tfloat frac = value - floor(value);\n\tfloat result; \n\t\n\tif(frac  < 0.5) { result = floor(value);\t }\n\tif(frac >= 0.5) { result = ceil(value); }\n\t\n\treturn result;\n}\n\n// The pixel coordinate being operated on.\nvec2 pixpos = SCREEN_UV;\n\nfloat over_x = ceil(UV.x * 16);\nfloat over_y = ceil(UV.y * 16);\n \n// Get dither pixel\nvec2 overlayCoord = vec2(over_x, over_y);\n// Get 1 or 0 based on the pixel location.\nfloat overlayPixelColor = mod(overlayCoord.x + overlayCoord.y, 2.0);\n// Dither is black and white every other pixel.\ncolor overlayPixel = color(overlayPixelColor, overlayPixelColor, overlayPixelColor, 1);\n \n// Get base color.\npixcol = vec4(texscreen(SCREEN_UV), 0);\n \n// Mix dither texture.\npixcol = mix(pixcol, overlayPixel, 0.1);\n \n// Determine the brightness of the pixel in a dumb way.\nfloat gray = (pixcol.r + pixcol.g + pixcol.b) / 3;\n \n// Round it to the nearest 0.25.\ngray = roundval(gray / 0.25) * 0.25;\n \n// Map the palette to the pixel based on the brightness and shift.\npixcol = tex(palette, vec2(gray, shift));\n \n// Multiply through the gl_Color for final output.\nCOLOR = pixcol;", "fragment_ofs":0, "light":"", "light_ofs":0, "vertex":"", "vertex_ofs":0 }

[resource]

shader/shader = SubResource( 1 )
shader/shading_mode = 0
shader_param/palette = ExtResource( 1 )
shader_param/shift = 0.75

